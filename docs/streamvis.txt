The stream visualizer is as much of an abstract concept as it is an
interface -- there's lots of implementation-specific bits hidden in
here.

A StreamVis component has: 
   a newData() method that takes in new data
   an invalidate() button that tells it the source data has been invalidated
   an internal queueInterface to the data we care about

newData is generally connected to the StreamSource's newData() signal
invalidate() is generally connected to the StreamSource's invalidate() sig.
the reference to the streamsource is to allow new streamVis to 
   process existing streamsource data upon start-up

A streamVis component exposes all of the relevant bits (Set trigger,
get trigger, set filter, etc.) publically, so that an assoicated
StreamVisControl object can manipulate its properties. In the GUI
context we always create both.

A streamVis component has a "triggered" signal that emits a list of
triggers. It also has a compatible "setTrigger" interface that accepts
a list of trigger times. THis way we can hook up trigger interfaces
differently.

--------------------------------------------------------------------------
Again, we have the question of "history", caching, and data
persistence.


Problem: we want StreamVis 1 to be able to trigger events on streams 2:N:

solution: trigger source emits trigger() signals with lists of trigger times.

Problem: stream vis 1 changes its definition of a trigger, by (say)
changing the threshold, and we'd like (love!) for all existing trigger
sinks to update accordingly.

solution: trigger source emits a triggersINvalid() event and then
sends all the new triggers.

Problem: we create a new StreamVis and we'd like to hook it up to
trigger 6's historical trigger data (after all, it'll have access to
the historical streamsource data). 

Vis can also get historical trigger data



